package nachos.vm;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.lang.System.*;

import nachos.machine.Lib;
import nachos.machine.Machine;
import nachos.machine.OpenFile;
import nachos.machine.Processor;
import nachos.machine.TranslationEntry;
import nachos.threads.Lock;
import nachos.userprog.UserKernel;

/**
 * A kernel that can support multiple demand-paging user processes.
 */
public class VMKernel extends UserKernel {
	/**
	 * Allocate a new VM kernel.
	 */
	public VMKernel() {
		super();
	}

	/**
	 * Initialize this kernel.
	 */
	public void initialize(String[] args) {
		super.initialize(args);
		IPTLock = new Lock();
//		TLBLock = new Lock();
		phyPages = new VMPage[pageNum];
		for (int i = 0; i < pageNum; ++i) phyPages[i] = null;
		// create and open swap file
		swapFile = fileSystem.open(swapFileName, true);
	}

	/**
	 * Test this kernel.
	 */
	public void selfTest() {
		super.selfTest();
	}

	/**
	 * Start running user programs.
	 */
	public void run() {
		super.run();
	}

	/**
	 * Terminate this kernel. Never returns.
	 */
	public void terminate() {
		// close and delete swap file
		swapFile.close();
		fileSystem.remove(swapFileName);
		IPT.clear();
		swapTable.clear();
		freeSwapPages.clear();
		super.terminate();
	}
	
	public static void replaceTLB(int pid,TranslationEntry entry) {
//		TLBLock.acquire();
		//find index to replace
		ArrayList<Integer> chosenList = new ArrayList<Integer>();
		int cnt = 0;
		int minLevel = 4, level;
		TranslationEntry cur = null;
		for (int i = 0; i < Machine.processor().getTLBSize(); ++i) {
			cur = Machine.processor().readTLBEntry(i);
			level = getTLBLevel(cur);
			if (level <= minLevel) {
				if (level < minLevel) {
					minLevel = level;
					cnt = 0;
				}
				chosenList.add(cnt++, i);
			}
		}
		int index = chosenList.get(Lib.random(cnt));
		TranslationEntry chosen = Machine.processor().readTLBEntry(index);
//		System.out.println("choose "+index+"in ("+cnt+")"+chosenList);
		
		//writeback
		if (chosen != null && chosen.valid) {
//			IPTLock.acquire();
			updateIPTByTLBEntry(pid,chosen);
//			IPTLock.release();
		}
		//write
		Machine.processor().writeTLBEntry(index, entry);
//		TLBLock.release();
		
	}
	
	static void updateIPTByTLBEntry(int pid, TranslationEntry entry) {
		//FIXME: don't require tlbentry to be in IPT;
//		VMPage page = new VMPage(pid, entry.vpn);
		TranslationEntry IPTEntry = IPT.get(phyPages[entry.ppn]);
//		System.out.println("update "+page+"; phyPages["+entry.ppn+"]="+phyPages[entry.ppn]);
		Lib.assertTrue(IPTEntry != null, "TLBEntry not in IPT");
		IPTEntry.dirty |= entry.dirty;
		IPTEntry.used |= entry.used;
	}
	
	
	private static int getTLBLevel(TranslationEntry entry) {
		if (entry == null || !entry.valid) return -1;
		if (!entry.used) {
			if (!entry.dirty) return 0;
			else return 1;
		} else if (!entry.dirty) return 2;
		else return 3;
	}
	
	// the page is previously in the ipt, swap out and swap in if need.
	public static TranslationEntry getIPTEntry(int pid, int vpn) {
		Lib.assertTrue(IPTLock.isHeldByCurrentThread());
		VMPage page = new VMPage(pid, vpn);
		
		TranslationEntry entry = IPT.get(page);
		if (entry == null)
			entry = handlePageFault(page);
		else {
			print("after get "+new VMPage(pid, vpn)+" from IPT");
		}
		return entry;
	}
	
	public static TranslationEntry handlePageFault(VMPage page) {
		int ppn = obtainFreePPN(page.pid);
		return swapIn(ppn,page);
	}
	
	private static TranslationEntry swapIn(int ppn, VMPage page) {
		Lib.assertTrue(IPTLock.isHeldByCurrentThread());
		
		freeSwapPages.remove(ppn);
		SwapPage swapPage = swapTable.get(page);
		Lib.assertTrue(swapPage != null);
		
		Processor p = Machine.processor();
		TranslationEntry entry = new TranslationEntry(page.vpn, ppn, true,swapPage.readOnly,false,false);
		addPage(page, entry);
		swapFile.read(swapPage.index*Processor.pageSize, p.getMemory(), Processor.makeAddress(ppn, 0), Processor.pageSize);
		
		
		print("after swap in "+page+"@"+ppn);
		return entry;
	}
	
	
	/**
	 *  the page is not previously in ipt, so swap out if need, then add
	 * @param pid
	 * @param vpn
	 * @param isReadOnly
	 * @return the new page's ppn
	 */
	public static TranslationEntry loadPage(int pid, int vpn) {
		Lib.assertTrue(IPTLock.isHeldByCurrentThread());
		
		VMPage page = new VMPage(pid, vpn);
		int ppn = obtainFreePPN(pid);
		TranslationEntry entry = new TranslationEntry(vpn, ppn, true, false,false, false); // TODO: I think because return reference, I can change readonly outside;
		addPage(page,entry);

		print("after load "+page+"@"+ppn);
		return entry;
	}
	
	public static void unloadProcessPages(int pid, int totalPageNum) {
		IPTLock.acquire();
		VMPage page = null;
		
		for (int i = 0; i < totalPageNum; ++i) {
			page = new VMPage(pid, i);
			if (IPT.containsKey(page)) IPTRemovePage(page);
			if (swapTable.containsKey(page))
				swapRemovePage(page);
		}

		
		Lib.debug(dbgVM, pid+"after remove swapfile:"+swapTable);
		IPTLock.release();
	}
	private static void swapRemovePage(VMPage page) {
		Integer index = swapTable.remove(page).index;
		Lib.debug(dbgVM, "remove "+page+"="+index);
		freeSwapPages.add(index);
		// do not need to clear the corresponding page in the swap file
	}
	private static void IPTRemovePage(VMPage page) {
		Lib.assertTrue(IPTLock.isHeldByCurrentThread());
		TranslationEntry entry = IPT.remove(page);
		phyPages[entry.ppn] = null;
	}
	public static void invalidateTLB() {
//		TLBLock.acquire();
		IPTLock.acquire();
		Processor p = Machine.processor();
		for (int i = 0; i < p.getTLBSize(); ++i) {
			p.writeTLBEntry(i, nullEntry);
		}
		IPTLock.release();
//		TLBLock.release();
	}
	// swap out if need
	private static int obtainFreePPN(int pid) {
		Lib.assertTrue(IPTLock.isHeldByCurrentThread());
		int ppn = -1;
		if (IPT.size() < pageNum) {
			for (;;clockPointer = (clockPointer+1)%pageNum) {
				if (phyPages[clockPointer] == null) {
					ppn = clockPointer;
					break;
				}
			}
		} else {
//			TLBLock.acquire();
			updateIPTByTLB(pid, false);
//			TLBLock.release();
			
			TranslationEntry entry = null;
			VMPage page = null;
			for (;;clockPointer = (clockPointer+1)%pageNum) {
				page = phyPages[clockPointer];
				entry = IPT.get(page);
				if (!entry.used) {
					ppn = clockPointer;
					break;
				} else {
					entry.used = false;
				}
			}
			// invalidate the corresponding  TLB
			Processor p = Machine.processor();
//			TLBLock.acquire();
			for (int i = 0; i < p.getTLBSize(); ++i) {
				if (p.readTLBEntry(i).ppn == entry.ppn) {
					p.writeTLBEntry(i, nullEntry);
					break;
				}
			}
//			TLBLock.release();
			
			//removePage(ppn);
			IPTRemovePage(page);
			swapOut(page, entry);
		}
		clockPointer = (clockPointer+1)%pageNum;
		return ppn;
	}
	private static void addPage(VMPage page, TranslationEntry entry) {
		Lib.assertTrue(IPTLock.isHeldByCurrentThread());
		int ppn = entry.ppn;
		Lib.assertTrue(0<=ppn && ppn<pageNum, "invalid ppn in addPage");
		IPT.put(page, entry);
		phyPages[ppn] = page;
	}
	public static void updateIPTByTLB(int pid, boolean clear) {
		Lib.assertTrue(IPTLock.isHeldByCurrentThread());
//		Lib.assertTrue(TLBLock.isHeldByCurrentThread());
		// will updating the 4 tlb entries be interrupt??=
		Processor p = Machine.processor();
		TranslationEntry entry = null;
		
		print("=========update IPT by TLB===========");
		
		for (int i = 0; i < p.getTLBSize(); ++i) {
			entry = p.readTLBEntry(i);
			if (entry != null && entry.valid) {
				updateIPTByTLBEntry(pid,entry);
				if (clear)
					p.writeTLBEntry(i, nullEntry);
			}
		}
	}
	
	public static void swapOut(VMPage page, TranslationEntry entry) {
		Lib.assertTrue(IPTLock.isHeldByCurrentThread());
		
		Processor p = Machine.processor();
		SwapPage swapPage = swapTable.get(page);
		if (swapPage != null && !entry.dirty ) {
			return;
		}
		
		Integer index;
		if (swapPage == null) {
			if (!freeSwapPages.isEmpty()) {
				Iterator<Integer> iter = freeSwapPages.iterator();
				index = iter.next();
			} else {
				index = swapTable.size();
			}
			swapTable.put(page, new SwapPage(index, entry.readOnly));
		} else {
			index = swapPage.index;
		}
		
		// write swap file
		swapFile.write(index*Processor.pageSize,p.getMemory(), 
				Processor.makeAddress(entry.ppn, 0), Processor.pageSize);
		
		
		print("after swap out "+page+":");
	}
	
	static void setTLB(int index, int pid, int vpn) {
		if (vpn < 0)
			Machine.processor().writeTLBEntry(index,nullEntry);
		else {
			TranslationEntry entry = IPT.get(new VMPage(pid, vpn));
			Lib.assertTrue(entry == null || entry.valid);
			if (entry != null) 
				Machine.processor().writeTLBEntry(index, entry);
			else Machine.processor().writeTLBEntry(index, nullEntry); // ERROR: once forget this
		}
	}
	
	static void print(String prefix) {
		Lib.debug(dbgVM, "====="+prefix+"=====\n"+"IPT: "+IPT
				+"\nSwapFile: "+swapTable);
//		Lib.debug(dbgVM, "iptlock "+IPTLock.isHeldByCurrentThread());
//		Lib.debug(dbgVM, "tlblock "+TLBLock.isHeldByCurrentThread());
	}

	private static final char dbgVM = 'v';

	private static int pageNum = Machine.processor().getNumPhysPages();
	private static final TranslationEntry nullEntry = new TranslationEntry(-1,-1,false, false, false,false);
	private static Hashtable<VMPage,TranslationEntry> IPT = new Hashtable<VMPage,TranslationEntry>();
	private static VMPage[] phyPages;
	static Lock IPTLock = null;
//	static Lock TLBLock = null;
	
	private static int clockPointer = 0;
	
	private static final String swapFileName = "SWAP";
	private static OpenFile swapFile = null;
	private static Hashtable<VMPage, SwapPage> swapTable = new Hashtable<VMPage, SwapPage>();
	private static HashSet<Integer> freeSwapPages = new HashSet<Integer>();
//	private static Lock swapLoc?k = null;
	
	
	private static class SwapPage {
		int index;
		boolean readOnly;
		SwapPage(int i, boolean r) {
			index = i;
			readOnly = r;
		}
	}
	
	private static class VMPage {
		int pid;
		int vpn;
		VMPage(int p, int v) {
			pid = p;
			vpn = v;
		}
		public String toString() {
			return "<"+pid+","+vpn+">";
		}
		
		public boolean equals(Object o){
			if(o == null)return false;
			return toString().equals(o.toString());
		}
		
		public int hashCode(){
			return toString().hashCode();
		}
	}
}

