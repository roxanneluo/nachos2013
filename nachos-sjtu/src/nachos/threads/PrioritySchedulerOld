package nachos.threads;

import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Set;

import nachos.machine.Lib;
import nachos.machine.Machine;

/**
 * A scheduler that chooses threads based on their priorities.
 * 
 * <p>
 * A priority scheduler associates a priority with each thread. The next thread
 * to be dequeued is always a thread with priority no less than any other
 * waiting thread's priority. Like a round-robin scheduler, the thread that is
 * dequeued is, among all the threads of the same (highest) priority, the thread
 * that has been waiting longest.
 * 
 * <p>
 * Essentially, a priority scheduler gives access in a round-robin fassion to
 * all the highest-priority threads, and ignores all other threads. This has the
 * potential to starve a thread if there's always a thread waiting with higher
 * priority.
 * 
 * <p>
 * A priority scheduler must partially solve the priority inversion problem; in
 * particular, priority must be donated through locks, and through joins.
 */
public class PriorityScheduler extends Scheduler {
	/**
	 * Allocate a new priority scheduler.
	 */
	public PriorityScheduler() {
	}

	/**
	 * Allocate a new priority thread queue.
	 * 
	 * @param transferPriority
	 *            <tt>true</tt> if this queue should transfer priority from
	 *            waiting threads to the owning thread.
	 * @return a new priority thread queue.
	 */
	public ThreadQueue newThreadQueue(boolean transferPriority) {
		return new PriorityQueue(transferPriority);
	}

	public int getPriority(KThread thread) {
		Lib.assertTrue(Machine.interrupt().disabled());

		return getThreadState(thread).getPriority();
	}

	public int getEffectivePriority(KThread thread) {
		Lib.assertTrue(Machine.interrupt().disabled());

		return getThreadState(thread).getEffectivePriority();
	}

	public void setPriority(KThread thread, int priority) {
		Lib.assertTrue(Machine.interrupt().disabled());

		Lib.assertTrue(priority >= priorityMinimum
				&& priority <= priorityMaximum);

		getThreadState(thread).setPriority(priority);
	}

	public boolean increasePriority()
	{
		boolean intStatus = Machine.interrupt().disable();

		KThread thread = KThread.currentThread();

		int priority = getPriority(thread);
		if (priority == priorityMaximum)
		{
		  Machine.interrupt().restore(intStatus); // bug identified by Xiao Jia @ 2011-11-04
			return false;
		}

		setPriority(thread, priority + 1);

		Machine.interrupt().restore(intStatus);
		return true;
	}

	public boolean decreasePriority()
	{
		boolean intStatus = Machine.interrupt().disable();

		KThread thread = KThread.currentThread();

		int priority = getPriority(thread);
		if (priority == priorityMinimum)
		{
		  Machine.interrupt().restore(intStatus); // bug identified by Xiao Jia @ 2011-11-04
			return false;
		}

		setPriority(thread, priority - 1);

		Machine.interrupt().restore(intStatus);
		return true;
	}

	/**
	 * The default priority for a new thread. Do not change this value.
	 */
	public static final int priorityDefault = 1;
	/**
	 * The minimum priority that a thread can have. Do not change this value.
	 */
	public static final int priorityMinimum = 0;
	/**
	 * The maximum priority that a thread can have. Do not change this value.
	 */
	public static final int priorityMaximum = 7;

	/**
	 * Return the scheduling state of the specified thread.
	 * 
	 * @param thread
	 *            the thread whose scheduling state to return.
	 * @return the scheduling state of the specified thread.
	 */
	protected ThreadState getThreadState(KThread thread) {
		if (thread.schedulingState == null)
			thread.schedulingState = new ThreadState(thread);

		return (ThreadState) thread.schedulingState;
	}

	/**
	 * A <tt>ThreadQueue</tt> that sorts threads by priority.
	 */
	public class PriorityQueue extends ThreadQueue {
		PriorityQueue(boolean transferPriority) {
			this.transferPriority = transferPriority;
//			if (transferPriority) dirty = true;
//			else dirty = false;
		}

		public void waitForAccess(KThread thread) {
			Lib.assertTrue(Machine.interrupt().disabled());
			getThreadState(thread).waitForAccess(this);
			
			if (owner == thread)
				changeOwner(null);
			if (queue.contains(thread)) return; //??
			queue.add(thread);
//			dirty = transferPriority? true: false;
			//System.out.println(this+" dirty = "+dirty);
		}

		public void acquire(KThread thread) {
			Lib.assertTrue(Machine.interrupt().disabled());
			changeOwner(thread);
			getThreadState(thread).acquire(this);
			
			Iterator<KThread> iter = queue.iterator();
			KThread same;
			while (iter.hasNext()) {
				same = iter.next();
				if (same == thread) {
					iter.remove();
					return;
				}
			}
		}
		private void changeOwner(KThread thread) {
			if (transferPriority) {
				if (owner != null)
					getThreadState(owner).release(this);
				owner = thread;
				//print();
			}
		}

		public KThread nextThread() {
			Lib.assertTrue(Machine.interrupt().disabled());
			// implement me
			if (queue.isEmpty()) return null;
			
			int maxPriority = PriorityScheduler.priorityMinimum-1,threadPriority;
			int sndPriority = PriorityScheduler.priorityMinimum;
			KThread next = null;
			for (KThread thread:queue) {
				threadPriority = getThreadState(thread).getEffectivePriority();
				if (threadPriority >= maxPriority) {
					sndPriority = maxPriority;
					if (threadPriority > maxPriority) {
						next = thread;
						maxPriority = threadPriority;
					}
				}
			}
			queue.remove(next);
			getThreadState(next).acquire(this);
			changeOwner(next);
			
//			if (transferPriority) {
////				dirty = false;
//				effectivePriority = Math.max(sndPriority, PriorityScheduler.priorityMinimum);
//			}
			
			return next;
		}

		/**
		 * Return the next thread that <tt>nextThread()</tt> would return,
		 * without modifying the state of this queue.
		 * 
		 * @return the next thread that <tt>nextThread()</tt> would return.
		 */
		protected ThreadState pickNextThread() {
			if (queue.isEmpty()) return null;
			
			int maxPriority = PriorityScheduler.priorityMinimum-1,threadPriority;
			KThread nextThread = null;
			for (KThread thread:queue) {
				threadPriority = getThreadState(thread).getEffectivePriority();
				if (threadPriority > maxPriority) {
					nextThread = thread;
					maxPriority = threadPriority;
				}
			}
			
//			if (dirty) {
////				dirty = false;
//				effectivePriority = maxPriority;
//			}
			return getThreadState(nextThread);
		}
		private int getEffectivePriority() {
			Lib.assertTrue(Machine.interrupt().disabled());
//			if (!dirty) return effectivePriority;
			for (KThread thread:queue)
				effectivePriority = Math.max(effectivePriority, getThreadState(thread).getEffectivePriority());
			//System.out.println("Before get ep");
			//print();
//			dirty = false;
			//System.out.println(this+" after get ep and set dirty to false");
			return effectivePriority;
		}
		public void print() {
			Lib.assertTrue(Machine.interrupt().disabled());
			// implement me (if you want)
			System.out.println("--------start-"+toString()+"-"
					+(owner == null? "null":owner.getName())
					+"-d:"+dirty+" ep:"+effectivePriority+"transfer:"+transferPriority+"--------");
			for (KThread thread: queue){
				ThreadState state = getThreadState(thread);
				System.out.println(thread.name
						+", p:"+state.priority
						+", ep:"+state.getEffectivePriority()
						+", owning:"+state.owning);
			}
			System.out.println("--------end--------");
		}
		

		/**
		 * <tt>true</tt> if this queue should transfer priority from waiting
		 * threads to the owning thread.
		 */
		public boolean transferPriority;
		private LinkedList<KThread> queue = new LinkedList<KThread>();
		private boolean dirty;
		private int effectivePriority = PriorityScheduler.priorityMinimum;
		private KThread owner = null;
	}

	/**
	 * The scheduling state of a thread. This should include the thread's
	 * priority, its effective priority, any objects it owns, and the queue it's
	 * waiting for, if any.
	 * 
	 * @see nachos.threads.KThread#schedulingState
	 */
	public class ThreadState {
		/**
		 * Allocate a new <tt>ThreadState</tt> object and associate it with the
		 * specified thread.
		 * 
		 * @param thread
		 *            the thread this state belongs to.
		 */
		public ThreadState(KThread thread) {
			this.thread = thread;

			setPriority(priorityDefault);
		}

		/**
		 * Return the priority of the associated thread.
		 * 
		 * @return the priority of the associated thread.
		 */
		public int getPriority() {
			return priority;
		}

		/**
		 * Return the effective priority of the associated thread.
		 * 
		 * @return the effective priority of the associated thread.
		 */
		public int getEffectivePriority() {
			// implement me
			int maxPriority = priority;
			for (PriorityQueue queue: owning) {
				Lib.assertTrue(queue.transferPriority);
				maxPriority = Math.max(maxPriority, queue.getEffectivePriority());
			}
			return maxPriority;
		}

		/**
		 * Set the priority of the associated thread to the specified value.
		 * 
		 * @param priority
		 *            the new priority.
		 */
		public void setPriority(int priority) {
			if (this.priority == priority)
				return;

			this.priority = priority;

			// implement me
//			for (PriorityQueue queue:waiting) 
//				if (queue.transferPriority)
//					queue.dirty = true;
		}

		/**
		 * Called when <tt>waitForAccess(thread)</tt> (where <tt>thread</tt> is
		 * the associated thread) is invoked on the specified priority queue.
		 * The associated thread is therefore waiting for access to the resource
		 * guarded by <tt>waitQueue</tt>. This method is only called if the
		 * associated thread cannot immediately obtain access.
		 * 
		 * @param waitQueue
		 *            the queue that the associated thread is now waiting on.
		 * 
		 * @see nachos.threads.ThreadQueue#waitForAccess
		 */
		public void waitForAccess(PriorityQueue waitQueue) {
			waiting.add(waitQueue);
			owning.remove(waitQueue);
		}

		/**
		 * Called when the associated thread has acquired access to whatever is
		 * guarded by <tt>waitQueue</tt>. This can occur either as a result of
		 * <tt>acquire(thread)</tt> being invoked on <tt>waitQueue</tt> (where
		 * <tt>thread</tt> is the associated thread), or as a result of
		 * <tt>nextThread()</tt> being invoked on <tt>waitQueue</tt>.
		 * 
		 * @see nachos.threads.ThreadQueue#acquire
		 * @see nachos.threads.ThreadQueue#nextThread
		 */
		public void acquire(PriorityQueue waitQueue) {
			// implement me
			if (waitQueue.transferPriority) 
				owning.add(waitQueue);
			waiting.remove(waitQueue);
			
		}
		
		private void release(PriorityQueue waitQueue) {
			owning.remove(waitQueue);
		}
		/** The thread with which this object is associated. */
		protected KThread thread;
		/** The priority of the associated thread. */
		protected int priority;
		protected int effectivePriority;
		
		public Set<PriorityQueue> owning = new HashSet<PriorityQueue>();
		private Set<PriorityQueue> waiting = new HashSet<PriorityQueue>();
	}
}
