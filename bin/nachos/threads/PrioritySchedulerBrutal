package nachos.threads;

import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.TreeSet;
import java.util.Set;

import nachos.machine.Lib;
import nachos.machine.Machine;

/**
 * A scheduler that chooses threads based on their priorities.
 * 
 * <p>
 * A priority scheduler associates a priority with each thread. The next thread
 * to be dequeued is always a thread with priority no less than any other
 * waiting thread's priority. Like a round-robin scheduler, the thread that is
 * dequeued is, among all the threads of the same (highest) priority, the thread
 * that has been waiting longest.
 * 
 * <p>
 * Essentially, a priority scheduler gives access in a round-robin fassion to
 * all the highest-priority threads, and ignores all other threads. This has the
 * potential to starve a thread if there's always a thread waiting with higher
 * priority.
 * 
 * <p>
 * A priority scheduler must partially solve the priority inversion problem; in
 * particular, priority must be donated through locks, and through joins.
 */
public class PriorityScheduler extends Scheduler {
	/**
	 * Allocate a new priority scheduler.
	 */
	public PriorityScheduler() {
	}

	/**
	 * Allocate a new priority thread queue.
	 * 
	 * @param transferPriority
	 *            <tt>true</tt> if this queue should transfer priority from
	 *            waiting threads to the owning thread.
	 * @return a new priority thread queue.
	 */
	public ThreadQueue newThreadQueue(boolean transferPriority) {
		return new PriorityQueue(transferPriority);
	}

	public int getPriority(KThread thread) {
		Lib.assertTrue(Machine.interrupt().disabled());

		return getThreadState(thread).getPriority();
	}

	public int getEffectivePriority(KThread thread) {
		Lib.assertTrue(Machine.interrupt().disabled());

		return getThreadState(thread).getEffectivePriority();
	}

	public void setPriority(KThread thread, int priority) {
		Lib.assertTrue(Machine.interrupt().disabled());

		Lib.assertTrue(priority >= priorityMinimum
				&& priority <= priorityMaximum);

		getThreadState(thread).setPriority(priority);
	}

	public boolean increasePriority()
	{
		boolean intStatus = Machine.interrupt().disable();

		KThread thread = KThread.currentThread();

		int priority = getPriority(thread);
		if (priority == priorityMaximum)
		{
		  Machine.interrupt().restore(intStatus); // bug identified by Xiao Jia @ 2011-11-04
			return false;
		}
		
		setPriority(thread, priority + 1);
		
		Machine.interrupt().restore(intStatus);
		return true;
	}

	public boolean decreasePriority()
	{
		boolean intStatus = Machine.interrupt().disable();

		KThread thread = KThread.currentThread();

		int priority = getPriority(thread);
		if (priority == priorityMinimum)
		{
		  Machine.interrupt().restore(intStatus); // bug identified by Xiao Jia @ 2011-11-04
			return false;
		}

		setPriority(thread, priority - 1);

		Machine.interrupt().restore(intStatus);
		return true;
	}
	

	/**
	 * The default priority for a new thread. Do not change this value.
	 */
	public static final int priorityDefault = 1;
	/**
	 * The minimum priority that a thread can have. Do not change this value.
	 */
	public static final int priorityMinimum = 0;
	/**
	 * The maximum priority that a thread can have. Do not change this value.
	 */
	public static final int priorityMaximum = 7;

	/**
	 * Return the scheduling state of the specified thread.
	 * 
	 * @param thread
	 *            the thread whose scheduling state to return.
	 * @return the scheduling state of the specified thread.
	 */
	protected ThreadState getThreadState(KThread thread) {
		if (thread.schedulingState == null)
			thread.schedulingState = new ThreadState(thread);

		return (ThreadState) thread.schedulingState;
	}

	
	/**
	 * A <tt>ThreadQueue</tt> that sorts threads by priority.
	 */
	public class PriorityQueue extends ThreadQueue {
		PriorityQueue(boolean transferPriority) {
			this.transferPriority = transferPriority;
		}

		public void waitForAccess(KThread thread) {
			Lib.assertTrue(Machine.interrupt().disabled());
			if (waitQueue.contains(thread)) return;
			int oldOwnerEp = -1;
			if (owner != null) {
				Lib.assertTrue(transferPriority);
				oldOwnerEp = getThreadState(owner).getEffectivePriority();
			}
			
			getThreadState(thread).waitForAccess(this);
			timeTable.put(thread, Machine.timer().getTime());
//			System.out.println("=================in waitFor time of "+thread.getName()
//						+" is "+timeTable.get(thread)+"===================");
			waitQueue.add(thread);
//			if (thread.getName() == "testThread #7") 
//				System.out.println("============"+thread.getName()+" waits for "+this+" at time:"+timeTable.get(thread)+"===============");
			
			if (owner != null) {
				updatePriority(owner, oldOwnerEp);
				if (owner == thread)
					owner = null;
			}
		}

		public void acquire(KThread thread) {
			Lib.assertTrue(Machine.interrupt().disabled());
			
			if (owner == thread) return;
			KThread prevOwner = owner;
			int oldThreadPriority = getThreadState(thread).getEffectivePriority();
			int oldOwnerPriority = prevOwner != null? getThreadState(prevOwner).getEffectivePriority():priorityMinimum-1;
			
			if (prevOwner != null)
				getThreadState(prevOwner).release(this);
			getThreadState(thread).acquire(this);
			waitQueue.remove(thread);
			timeTable.remove(thread);
			
			if (transferPriority)
				owner = thread;
			
			updatePriority(prevOwner, oldOwnerPriority);
			updatePriority(thread, oldThreadPriority);
		}

		public KThread nextThread() {
			Lib.assertTrue(Machine.interrupt().disabled());
			// implement me
			//print();
			KThread prevOwner = owner;
			if (prevOwner != null)
				getThreadState(prevOwner).release(this);
			
			if (waitQueue.isEmpty()) return owner = null;
			
			KThread next = pickNextThread().thread;
			int oldOwnerEp = prevOwner!=null? getThreadState(prevOwner).getEffectivePriority():-1;
			int oldNextEp = getThreadState(next).getEffectivePriority();
			
			waitQueue.remove(next);
//			System.out.println("next = "+next.getName());
//			System.out.println("contains "+next.getName()+"? "+waitQueue.contains(next));
			timeTable.remove(next);
			getThreadState(next).acquire(this);
		
			if (transferPriority)
				owner = next;
			
			updatePriority(next, oldNextEp);
			updatePriority(prevOwner, oldOwnerEp);
			return next;
		}
		
		private void updatePriority(KThread thread, int oldEp) {
			if (thread == null) return;
			getThreadState(thread).updatePriority(oldEp);
			//print();
		}

		/**
			getThreadState
		 * Return the next thread that <tt>nextThread()</tt> would return,
		 * without modifying the state of this queue.
		 * 
		 * @return the next thread that <tt>nextThread()</tt> would return.
		 */
		protected ThreadState pickNextThread() {
			if (waitQueue.isEmpty()) return null;
			return getThreadState(waitQueue.first());
		}
		
		public void print() {
			Lib.assertTrue(Machine.interrupt().disabled());
			// implement me (if you want)
			System.out.println("--------start-"+toString()+"----"
					+(owner == null? "null":owner.getName())
					+"transfer:"+transferPriority+"--------");
			for (KThread thread: waitQueue){
				ThreadState state = getThreadState(thread);
				System.out.println(thread.name
						+", p:"+state.priority
						+", ep:"+state.getEffectivePriority()
						+", time:"+timeTable.get(thread)
						+", owning:"+state.owning);
			}
			System.out.println("--------end--------");
		}
		

		/**
		 * <tt>true</tt> if this queue should transfer priority from waiting
		 * threads to the owning thread.
		 */
		public boolean transferPriority;
		public TreeSet<KThread> waitQueue = new TreeSet<KThread> (
				new Comparator<KThread>() {
					public int compare(KThread a, KThread b) {
						Long timea = timeTable.get(a);
						Long timeb = timeTable.get(b);
//						if (a.getName() == "testThread #28" || b.getName() == "testThread #28")
//							System.out.println("when compare "+a+" to "+b+", timea = "+timea+" timeb = "+timeb);
						if (timea == null || timeb == null) return 1;
						int epa = getThreadState(a).getEffectivePriority();
						int epb = getThreadState(b).getEffectivePriority();
						if (epa > epb) return -1;
						if (epa < epb) return 1;
						//compare in contains
						/*if (timea == null || timeb == null) {
							System.out.println(timea+" "+timeb);
							return a.compareTo(b);
						}
						*/
						if (timea < timeb) return -1;
						if (timea > timeb) return 1;
						return a.compareTo(b);
					}
				});
		public HashMap<KThread, Long> timeTable = new HashMap<KThread, Long>(); 
		private KThread owner = null;
	}

	/**
	 * The scheduling state of a thread. This should include the thread's
	 * priority, its effective priority, any objects it owns, and the queue it's
	 * waiting for, if any.
	 * 
	 * @see nachos.threads.KThread#schedulingState
	 */
	public class ThreadState {
		/**
		 * Allocate a new <tt>ThreadState</tt> object and associate it with the
		 * specified thread.
		 * 
		 * @param thread
		 *            the thread this state belongs to.
		 */
		public ThreadState(KThread thread) {
			this.thread = thread;
			effectivePriority = priorityDefault;
			
			setPriority(priorityDefault);
		}

		/**
		 * Return the priority of the associated thread.
		 * 
		 * @return the priority of the associated thread.
		 */
		public int getPriority() {
			return priority;
		}

		/**
		 * Return the effective priority of the associated thread.
		 * 
		 * @return the effective priority of the associated thread.
		 */
		public int getEffectivePriority() {
			// implement me
			return effectivePriority;
			/*effectivePriority = priority;
			for (PriorityQueue queue: owning) {
				Lib.assertTrue(queue.transferPriority);
				if (queue.waitQueue.isEmpty()) continue;
				effectivePriority = Math.max(effectivePriority, 
						getThreadState(queue.waitQueue.first()).getEffectivePriority());
			}
			return effectivePriority;*/
		}

		/**
		 * Set the priority of the associated thread to the specified value.
		 * 
		 * @param priority
		 *            the new priority.
		 */
		public void setPriority(int pr) {
//			System.out.println("set "+thread.getName()+" from "+priority+" to "+pr);
			if (priority == pr)
				return;
			
			int oldEp = effectivePriority;
			this.priority = pr;
			updatePriority(oldEp);
			// implement me
		}

		/**
		 * Called when <tt>waitForAccess(thread)</tt> (where <tt>thread</tt> is
		 * the associated thread) is invoked on the specified priority queue.
		 * The associated thread is therefore waiting for access to the resource
		 * guarded by <tt>waitQueue</tt>. This method is only called if the
		 * associated thread cannot immediately obtain access.
		 * 
		 * @param waitQueue
		 *            the queue that the associated thread is now waiting on.
		 * 
		 * @see nachos.threads.ThreadQueue#waitForAccess
		 */
		public void waitForAccess(PriorityQueue waitQueue) {
//			if (waitQueue.transferPriority)
			waiting.add(waitQueue);
			owning.remove(waitQueue);
		}

		/**
		 * Called when the associated thread has acquired access to whatever is
		 * guarded by <tt>waitQueue</tt>. This can occur either as a result of
		 * <tt>acquire(thread)</tt> being invoked on <tt>waitQueue</tt> (where
		 * <tt>thread</tt> is the associated thread), or as a result of
		 * <tt>nextThread()</tt> being invoked on <tt>waitQueue</tt>.
		 * 
		 * @see nachos.threads.ThreadQueue#acquire
		 * @see nachos.threads.ThreadQueue#nextThread
		 */
		public void acquire(PriorityQueue waitQueue) {
			// implement me
			if (waitQueue.transferPriority) 
				owning.add(waitQueue);
			waiting.remove(waitQueue);
			//System.out.println(thread+" owns "+owning);
		}
		
		private void release(PriorityQueue waitQueue) {
			owning.remove(waitQueue);
		}
		
		private int calcDirectEffectivePriority() {
			int ep = priority;
			ThreadState next = null;
			for (PriorityQueue queue: owning) {
				Lib.assertTrue(queue.transferPriority);
				next = queue.pickNextThread();
				if (next != null)
					ep = Math.max(ep, next.getEffectivePriority());
			}
			return ep;
		}
		
		protected void updatePriority(int oldEp) {
			int newEp = calcDirectEffectivePriority();
			if (newEp == oldEp) return;
			
			for (PriorityQueue queue:waiting) {
				queue.waitQueue.remove(thread);
//				System.out.println(queue.waitQueue+" contains "+thread
//									+"? "+queue.waitQueue.contains(thread));
			}
			effectivePriority = newEp;
			for (PriorityQueue queue:waiting)
				queue.waitQueue.add(thread);
			
			ThreadState ownerState = null;
			int oldOwnerEp;
			for (PriorityQueue queue: waiting) {	/*			
				queue.waitQueue.remove(thread);
				System.out.println("in update "+queue.waitQueue+" contains "+thread+"? "+queue.waitQueue.contains(thread));
				queue.waitQueue.add(thread);*/
				//System.out.println("update "+thread.getName());
				
				if (!queue.transferPriority || queue.owner == null) continue;
				ownerState = getThreadState(queue.owner);
				oldOwnerEp = ownerState.getEffectivePriority();
				ownerState.updatePriority(oldOwnerEp);
			}
		}
		/** The thread with which this object is associated. */
		protected KThread thread;
		/** The priority of the associated thread. */
		protected int priority;
		
		
		//only owns queues who transferPriority
		public Set<PriorityQueue> owning = new HashSet<PriorityQueue>();
		private Set<PriorityQueue> waiting = new HashSet<PriorityQueue>();
	}
	
}